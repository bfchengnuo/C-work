/*
	Filename:mergeSort.cpp、递归版
	Author: xiaobing
	E-mail: xiaobingzhang29@gmail.com
	Date: 2013-08-27
*/
#include<iostream>
#include<string>
#include<algorithm>
#include<cstdlib>
#define N 10
using namespace std;
/*
 *归并排序：
	归并排序的思想是合并两个已经有序的序列为一个大的有序的序列
	首先，进行分组，一分为二，二分为四，依次下去，最终的状态是
	全部分组为一个元素，然后向上开始和并分组，四个合并为两个，
	二个合并为一个，最终在合并的过程中将顺序排好了，具体如下：
	当合并的时候，有两个指针，i，j分别指向分组的第一个元素，分
	陪一个与数组同样大小的数组temp，定义一个k用于遍历数组temp,
	k指向两个分组中的最低的位置，即合并分组传入的开始位置，然后
	分别用指针i和j开始比较第一个分组和第二个分组元素的大小，选择
	小的元素存入temp,同时k增1,在小的元素的那个分组的指针增1,直到
	其中一个分组的元素全部完毕为止，然后把另一个剩下的元素存入temp
	中，k和剩下元素自增。

	这样，temp中就把两个分组的元素排好顺序了，接着，将这些数据对应
	原数组的为止写入，达到局部有序了，经过从小的分组 不断合并，最终
	整个数组就是排序排好的了。
 */
int temp[N];   //定义了一个和原数组同样大小的临时数组，用于保存两个分组合并的结果

void merge(int arr[], int start, int mid, int end);

/*
 *@param arr 待排序的数组
  @param start 待排序的数组的开始位置，可以只排序想要排序的一部分
  @param end 待排序的数组的结束位置，比长度值少1

  该函数的功能是用于对数组进行分组，然后调用合并函数将两个分组进行合并
  使得每两个分组都是合并后都是有序的

 */
void mergeSort(int arr[], int start, int end){
	if(start < end){
		int mid = (start + end) / 2; //分界点
		mergeSort(arr, start, mid);   //将分组分到最小，所以递归调用分组
		mergeSort(arr, mid + 1, end);
		merge(arr, start, mid, end); //合并start~mid 和 mid + 1 ~ end两个分组
	}
}

/*
 *@param  arr 待排序的数组
  @param  start 分组1的开始位置
  @param  mid   两个分组的分界点
  @param  end   两个分组的结束位置

  该函数的功能用于合并两个分组为一个有序的分组
 */
void merge(int arr[], int start, int mid, int end){
    //定义了第一个分组的指针i，指向第一个分组的第一个位置
	//定义了第二个分组的指针j，指向第二个分组的第一个位置
	//定义了一个临时数组位置，使其指向两个分组的起始位置
	//这个位置用于将这个两个分组的元素复制到临时数组中
	int i = start, j = mid + 1, k = start;

	//当两个分组都没有遍历完时，即，如果有一个遍历完了，循环结束
	while(i <= mid && j <= end){
		//比较如果小的那个元素，将被复制到临时数组中，并移动其指针，指向
		//下一个元素，进行下一次比较
		if(arr[i] > arr[j]){
			temp[k++] = arr[j++];
		} else {
			temp[k++] = arr[i++];
		}
	}

	//经过比较完后，如果还有元素剩余，由于两个分组都是有序分组，所以剩余的元素 
	//是有序的并且比较大的元素，所以直接复制到后面即可
	while(i <= mid){
		temp[k++] = arr[i++];
	}

	//同上
	while(j <= end){
		temp[k++] = arr[j++];
	}

	//将临时数组中的值对号赋值回原数组中，这样达到了对原数组的排序
	for(i = start; i <= end; i++){
		arr[i] = temp[i];
	}

}

void print(int arr[], int n){

	int i;
	for(i = 0;i < n;i++){
		cout<<arr[i]<<" ";
	}

	cout<<endl;
}

int main(){

	int arr[N] = {2342,35,45,45,3,24,123,345,234,345};
	mergeSort(arr, 0, N - 1);
	print(arr, N);

    return 0;
}

---------------------------分割线--------------------------------------
public void Merge(int[] array, int low, int mid, int high) {

    int i = low; // i是第一段序列的下标

    int j = mid + 1; // j是第二段序列的下标

    int k = 0; // k是临时存放合并序列的下标

    int[] array2 = new int[high - low + 1]; // array2是临时合并序列



    // 扫描第一段和第二段序列，直到有一个扫描结束

    while (i <= mid && j <= high) {

        // 判断第一段和第二段取出的数哪个更小，将其存入合并序列，并继续向下扫描

        if (array[i] <= array[j]) {

            array2[k] = array[i];

            i++;

            k++;

        } else {

            array2[k] = array[j];

            j++;

            k++;

        }

    }



    // 若第一段序列还没扫描完，将其全部复制到合并序列

    while (i <= mid) {

        array2[k] = array[i];

        i++;

        k++;

    }



    // 若第二段序列还没扫描完，将其全部复制到合并序列

    while (j <= high) {

        array2[k] = array[j];

        j++;

        k++;

    }



    // 将合并序列复制到原始序列中

    for (k = 0, i = low; i <= high; i++, k++) {

        array[i] = array2[k];

    }

}